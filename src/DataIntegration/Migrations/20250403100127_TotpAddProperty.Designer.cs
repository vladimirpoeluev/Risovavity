// <auto-generated />
using System;
using DataIntegration.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConsoleApp1.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250403100127_TotpAddProperty")]
    partial class TotpAddProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainModel.Model.Canvas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("MainVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MainVersionId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("Canvas");
                });

            modelBuilder.Entity("DomainModel.Model.InteractiveCanvas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Author")
                        .HasColumnType("integer");

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IdStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Author");

                    b.HasIndex("IdStatus");

                    b.ToTable("InteractiveCanvas");
                });

            modelBuilder.Entity("DomainModel.Model.LikeOfCanvas", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("CanvasId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "CanvasId");

                    b.HasIndex("CanvasId");

                    b.ToTable("LikeOfCanvas");
                });

            modelBuilder.Entity("DomainModel.Model.LikeOfVersionProject", b =>
                {
                    b.Property<int>("VersionProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("VersionProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeOfVersionProject");
                });

            modelBuilder.Entity("DomainModel.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("DomainModel.Model.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("DomainModel.Model.TotpRestoreAccess", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("UserId");

                    b.ToTable("TotpRestoreAccesses");
                });

            modelBuilder.Entity("DomainModel.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("bytea");

                    b.Property<int>("IdRole")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("character varying(250)");

                    b.Property<bool?>("UseTwoFactorAuthentication")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("DomainModel.Model.VersionProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorOfVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ParentOfVersionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorOfVersionId");

                    b.HasIndex("ParentOfVersionId");

                    b.ToTable("VersionsProjects");
                });

            modelBuilder.Entity("DomainModel.Model.Canvas", b =>
                {
                    b.HasOne("DomainModel.Model.User", "Author")
                        .WithMany("Canvas")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_Canvas_User");

                    b.HasOne("DomainModel.Model.VersionProject", "MainVersion")
                        .WithOne("Canvas")
                        .HasForeignKey("DomainModel.Model.Canvas", "MainVersionId")
                        .IsRequired()
                        .HasConstraintName("FK_Canvas_VersionProject");

                    b.HasOne("DomainModel.Model.Status", "Status")
                        .WithMany("Canvas")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Canvas_Status");

                    b.Navigation("Author");

                    b.Navigation("MainVersion");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DomainModel.Model.InteractiveCanvas", b =>
                {
                    b.HasOne("DomainModel.Model.User", "AuthorNavigation")
                        .WithMany("InteractiveCanvas")
                        .HasForeignKey("Author")
                        .IsRequired()
                        .HasConstraintName("FK_InteractiveCanvas_User");

                    b.HasOne("DomainModel.Model.Status", "IdStatusNavigation")
                        .WithMany("InteractiveCanvas")
                        .HasForeignKey("IdStatus")
                        .IsRequired()
                        .HasConstraintName("FK_InteractiveCanvas_Status");

                    b.Navigation("AuthorNavigation");

                    b.Navigation("IdStatusNavigation");
                });

            modelBuilder.Entity("DomainModel.Model.LikeOfCanvas", b =>
                {
                    b.HasOne("DomainModel.Model.Canvas", "Canvas")
                        .WithMany("LikeOfCanvas")
                        .HasForeignKey("CanvasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModel.Model.User", "User")
                        .WithMany("LikeOfCanvas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Canvas");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainModel.Model.LikeOfVersionProject", b =>
                {
                    b.HasOne("DomainModel.Model.User", "User")
                        .WithMany("LikeOfVersionProject")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModel.Model.VersionProject", "VersionProject")
                        .WithMany("LikeOfVersions")
                        .HasForeignKey("VersionProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VersionProject");
                });

            modelBuilder.Entity("DomainModel.Model.TotpRestoreAccess", b =>
                {
                    b.HasOne("DomainModel.Model.User", "User")
                        .WithOne("TotpRestoreAccess")
                        .HasForeignKey("DomainModel.Model.TotpRestoreAccess", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainModel.Model.User", b =>
                {
                    b.HasOne("DomainModel.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DomainModel.Model.VersionProject", b =>
                {
                    b.HasOne("DomainModel.Model.User", "AuthorOfVersion")
                        .WithMany("VersionsProjects")
                        .HasForeignKey("AuthorOfVersionId")
                        .IsRequired()
                        .HasConstraintName("FK_VersionProject_User");

                    b.HasOne("DomainModel.Model.VersionProject", "ParentOfVersion")
                        .WithMany("DescendantsVersionProject")
                        .HasForeignKey("ParentOfVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_VersionProject_VersionProject");

                    b.Navigation("AuthorOfVersion");

                    b.Navigation("ParentOfVersion");
                });

            modelBuilder.Entity("DomainModel.Model.Canvas", b =>
                {
                    b.Navigation("LikeOfCanvas");
                });

            modelBuilder.Entity("DomainModel.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DomainModel.Model.Status", b =>
                {
                    b.Navigation("Canvas");

                    b.Navigation("InteractiveCanvas");
                });

            modelBuilder.Entity("DomainModel.Model.User", b =>
                {
                    b.Navigation("Canvas");

                    b.Navigation("InteractiveCanvas");

                    b.Navigation("LikeOfCanvas");

                    b.Navigation("LikeOfVersionProject");

                    b.Navigation("TotpRestoreAccess")
                        .IsRequired();

                    b.Navigation("VersionsProjects");
                });

            modelBuilder.Entity("DomainModel.Model.VersionProject", b =>
                {
                    b.Navigation("Canvas")
                        .IsRequired();

                    b.Navigation("DescendantsVersionProject");

                    b.Navigation("LikeOfVersions");
                });
#pragma warning restore 612, 618
        }
    }
}
